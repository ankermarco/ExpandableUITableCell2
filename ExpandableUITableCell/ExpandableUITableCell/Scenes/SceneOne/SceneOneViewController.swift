//
//  SceneOneViewController.swift
//  ExpandableUITableCell
//
//  Created by Ke Ma on 21/07/2017.
//  Copyright (c) 2017 Ke Ma. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SceneOneDisplayLogic: class
{
  func receiveData(viewModel: SceneOne.SceneOne.ViewModel)
}

class SceneOneViewController: UIViewController, SceneOneDisplayLogic
{
  var interactor: SceneOneBusinessLogic?
  var router: (NSObjectProtocol & SceneOneRoutingLogic & SceneOneDataPassing)?
  
  // MARK: Private Variables
  var data = [String]()
  var selectedIndeies = [Int]()
  
  // MARK: IBOutlets
  
  @IBOutlet weak var dataTableView: UITableView!
  
  

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = SceneOneInteractor()
    let presenter = SceneOnePresenter()
    let router = SceneOneRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    
    self.dataTableView.dataSource = self
    self.dataTableView.delegate = self
    
    fetchData()
  }
  
  //@IBOutlet weak var nameTextField: UITextField!
  

  // View Controller to initialise the command to fetch Data
  // Using interactor to perform this task
  func fetchData()
  {
    interactor?.fetchData()
  }
  
  func receiveData(viewModel: SceneOne.SceneOne.ViewModel)
  {
    self.data = viewModel.data
    
    // selectedIndexs is tracking all the cells open/close status
    // by assign initial -1 value to it
    for _ in 0..<self.data.count
    {
      self.selectedIndeies.append(-1)
    }
  }
}

extension SceneOneViewController : UITableViewDelegate
{
  func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath)
  {
    if selectedIndeies[indexPath.row] == indexPath.row
    {
      selectedIndeies[indexPath.row] = -1
    }
    else
    {
      selectedIndeies[indexPath.row] = indexPath.row
    }
    
    self.dataTableView.beginUpdates()
    self.dataTableView.endUpdates()
  }
  
  func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
    if selectedIndeies[indexPath.row] == indexPath.row
    {
      return 100
    }
    else
    {
      return 40
    }
  }
}

extension SceneOneViewController : UITableViewDataSource
{
  func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
    return self.data.count
  }
  
  func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
    let cell = tableView.dequeueReusableCell(withIdentifier: "CustomCell", for: indexPath) as! CustomCell
    
    cell.collapisbleViewLabel.text = data[indexPath.row]
    
    cell.selectionStyle = .none
    
    return cell
  }
}
